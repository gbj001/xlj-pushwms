<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_HOME" value="/var/logs/tomcat/pushwms" />
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>
    <!-- 按照每天生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/TestWeb.log.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>






<!--<configuration>-->
    <!--<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"> &lt;!&ndash; encoder 默认配置为PatternLayoutEncoder &ndash;&gt;-->
        <!--<encoder>-->
            <!--<pattern>[pushwms] %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>-->
            <!--<charset>utf-8</charset>-->
        <!--</encoder>-->
    <!--</appender> &lt;!&ndash; 日志记录器，日期滚动记录 &ndash;&gt;-->
    <!--<appender name="FILEERROR" class="ch.qos.logback.core.rolling.RollingFileAppender"> &lt;!&ndash; 正在记录的日志文件的路径及文件名 &ndash;&gt;-->
        <!--<file>/var/logs/tomcat/pushwms/error.log</file> &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录:这里是每天产生一个文件 &ndash;&gt;-->
        <!--<rollingPolicy-->
                <!--class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> &lt;!&ndash; 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 &ndash;&gt; &lt;!&ndash;设置日志命名模式&ndash;&gt;-->
            <!--<fileNamePattern>/var/logs/pushwms/log-error-%d{yyyy-MM-dd}.%i.log-->
            <!--</fileNamePattern> &lt;!&ndash; 除按日志记录之外，还配置了日志文件不能超过3M，若超过3M，日志文件会以索引0开始， 命名日志文件，例如log-error-2013-12-21.0.log &ndash;&gt;-->
            <!--<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
                <!--<maxFileSize>3MB</maxFileSize>-->
            <!--</timeBasedFileNamingAndTriggeringPolicy> &lt;!&ndash;最多保留30天log&ndash;&gt;-->
            <!--<maxHistory>30</maxHistory>-->
        <!--</rollingPolicy> &lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
        <!--<append>true</append> &lt;!&ndash; 日志文件的格式 &ndash;&gt;-->
        <!--<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
            <!--<pattern>[pushwms] %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>-->
            <!--<charset>utf-8</charset>-->
        <!--</encoder> &lt;!&ndash; 此日志文件只记录error级别的 &ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>error</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
    <!--</appender> &lt;!&ndash; 日志记录器，日期滚动记录 &ndash;&gt;-->
    <!--<appender name="FILWARN" class="ch.qos.logback.core.rolling.RollingFileAppender"> &lt;!&ndash; 正在记录的日志文件的路径及文件名 &ndash;&gt;-->
        <!--<file>/var/logs/tomcat/pushwms/warn.log</file> &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录:这里是每天产生一个文件 &ndash;&gt;-->
        <!--<rollingPolicy-->
                <!--class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> &lt;!&ndash; 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 &ndash;&gt; &lt;!&ndash;设置日志命名模式&ndash;&gt;-->
            <!--<fileNamePattern>/var/logs/tomcat/pushwms/log-warn-%d{yyyy-MM-dd}.%i.log-->
            <!--</fileNamePattern> &lt;!&ndash; 除按日志记录之外，还配置了日志文件不能超过3M，若超过3M，日志文件会以索引0开始， 命名日志文件，例如log-error-2013-12-21.0.log &ndash;&gt;-->
            <!--<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
                <!--<maxFileSize>3MB</maxFileSize>-->
            <!--</timeBasedFileNamingAndTriggeringPolicy> &lt;!&ndash;最多保留30天log&ndash;&gt;-->
            <!--<maxHistory>30</maxHistory>-->
        <!--</rollingPolicy> &lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
        <!--<append>true</append> &lt;!&ndash; 日志文件的格式 &ndash;&gt;-->
        <!--<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
            <!--<pattern>[pushwms] %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>-->
            <!--<charset>utf-8</charset>-->
        <!--</encoder> &lt;!&ndash; 此日志文件只记录error级别的 &ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>warn</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
    <!--</appender> &lt;!&ndash; logger 的 level 代表 记录 大于或者等于当前级别的信息 &ndash;&gt; &lt;!&ndash; additivity属性为false，表示此loger的打印信息不再向上级传递,即比如 root ,就不会记录该级别的信息了 默认是true 将信息给上级比如 root &ndash;&gt; &lt;!&ndash; 这里将请求的地址等信息打印到控制台 &ndash;&gt;-->
    <!--<logger name="org.springframework.web.servlet.DispatcherServlet" level="DEBUG" additivity="true">-->
        <!--<appender-ref ref="STDOUT"/>-->
    <!--</logger> &lt;!&ndash;将项目开发的中的日志记录警告以上的也显示在控制台上， 可是不能改为debug,info 因为改了之后会把 简单的 sql语句也一起打印了出来了. 这种方式没有 mybatis-plus 配置文件的log-impl那种好 &ndash;&gt;-->
    <!--<logger name="com.stylefeng.pushwms" level="WARN" additivity="true">-->
        <!--<appender-ref ref="STDOUT"/>-->
    <!--</logger> &lt;!&ndash; 这个并不能把 执行 sql也打印出来的 <logger name="com.alibaba.druid" level="WARN" additivity="true"> <appender-ref ref="STDOUT"/> </logger> &ndash;&gt; &lt;!&ndash;下面是为了控制将异常也给打印到控制台 &ndash;&gt;-->
    <!--<logger name="org.mybatis" level="WARN" additivity="true">-->
        <!--<appender-ref ref="STDOUT"/>-->
    <!--</logger>-->
    <!--<logger name="java.sql" level="WARN" additivity="true">-->
        <!--<appender-ref ref="STDOUT"/>-->
    <!--</logger>-->
    <!--<logger name="org.apache" level="WARN" additivity="true">-->
        <!--<appender-ref ref="STDOUT"/>-->
    <!--</logger>-->
    <!--<logger name="org.springframework" level="WARN" additivity="true">-->
        <!--<appender-ref ref="STDOUT"/>-->
    <!--</logger>-->
    <!--<logger name="org.apache" level="WARN" additivity="true">-->
        <!--<appender-ref ref="STDOUT"/>-->
    <!--</logger>-->
    <!--<root level="WARN"> &lt;!&ndash; 为了不让控制台显示那么多 无用的 debug 代码所以 注释掉 <appender-ref ref="STDOUT" /> &ndash;&gt;-->
        <!--<appender-ref ref="FILEERROR"/>-->
        <!--<appender-ref ref="FILWARN"/>-->
    <!--</root>-->
<!--</configuration>-->
